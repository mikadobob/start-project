{"version":3,"sources":["assets\\scripts\\Star.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAQM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAA0B,wBAAY;IAAtC;QAAA,qEAmCC;QAhCG,gBAAU,GAAW,CAAC,CAAC;QAEf,UAAI,GAAS,IAAI,CAAC;;IA8B9B,CAAC;IA5BG,gCAAiB,GAAjB;QACI,kEAAkE;QAClE,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC/C,4FAA4F;QAC5F,IAAI,IAAI,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;QAC7D,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,uBAAQ,GAAR;QACI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QAEzB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;IAE1B,CAAC;IAED,qBAAM,GAAN,UAAO,EAAE;QACL,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,IAAI,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE;YAC5C,6BAA6B;YAC7B,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,OAAO;SACV;QAED,IAAI,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;QAC9D,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC;IACnF,CAAC;IA/BD;QADC,QAAQ;4CACc;IAHd,IAAI;QADhB,OAAO;OACK,IAAI,CAmChB;IAAD,WAAC;CAnCD,AAmCC,CAnCyB,EAAE,CAAC,SAAS,GAmCrC;AAnCY,oBAAI","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\nimport { Game } from \"./Game\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport class Star extends cc.Component {\r\n\r\n    @property\r\n    pickRadius: number = 0;\r\n\r\n    private game: Game = null;\r\n\r\n    getPlayerDistance() {\r\n        // Judge the distance according to the position of the player node\r\n        let playerPos = this.game.player.getPosition();\r\n        // Calculate the distance between the two points according to the position of the two points\r\n        var dist = playerPos.subtract(this.node.getPosition()).mag();\r\n        return dist;\r\n    }\r\n\r\n    onPicked() {\r\n        this.game.spawnNewStar();\r\n\r\n        this.node.destroy();\r\n        this.game.gainScore();\r\n\r\n    }\r\n\r\n    update(dt) {\r\n        console.log(this.game);\r\n        if (this.getPlayerDistance() < this.pickRadius) {\r\n            // Invoke collecting behavior\r\n            this.onPicked();\r\n            return;\r\n        }\r\n\r\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\r\n        var minOpacity = 50;\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n    }\r\n}\r\n"]}